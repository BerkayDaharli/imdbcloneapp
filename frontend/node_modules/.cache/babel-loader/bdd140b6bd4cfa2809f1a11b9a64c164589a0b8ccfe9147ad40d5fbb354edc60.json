{"ast":null,"code":"import axios from 'axios';\nconst OMDB_API_KEY = '2d5488dc'; // Your OMDb API key\nconst OMDB_BASE_URL = 'https://www.omdbapi.com/';\nconst YOUTUBE_API_KEY = 'AIzaSyARJFJqqWewoRGc4aCOzfgEJhp9o4bKv_8'; // Replace with your YouTube API key\nconst YOUTUBE_BASE_URL = 'https://www.googleapis.com/youtube/v3/search';\nexport const fetchMovies = async (query = 'movie', count = 10) => {\n  const response = await axios.get(`${OMDB_BASE_URL}?apikey=${OMDB_API_KEY}&s=${query}`);\n  if (response.data.Search) {\n    const moviePromises = response.data.Search.slice(0, count).map(movie => axios.get(`${OMDB_BASE_URL}?apikey=${OMDB_API_KEY}&i=${movie.imdbID}`));\n    const movieResponses = await Promise.all(moviePromises);\n    return movieResponses.map(res => res.data);\n  }\n  return [];\n};\nexport const searchMovies = async (query, count = 3) => {\n  const response = await axios.get(`${OMDB_BASE_URL}?apikey=${OMDB_API_KEY}&s=${query}`);\n  if (response.data.Search) {\n    const moviePromises = response.data.Search.slice(0, count).map(movie => axios.get(`${OMDB_BASE_URL}?apikey=${OMDB_API_KEY}&i=${movie.imdbID}`));\n    const movieResponses = await Promise.all(moviePromises);\n    return movieResponses.map(res => res.data);\n  }\n  return [];\n};\nexport const fetchMovieDetails = async id => {\n  const response = await axios.get(`${OMDB_BASE_URL}?apikey=${OMDB_API_KEY}&i=${id}`);\n  return response.data;\n};\nexport const fetchTrailer = async title => {\n  try {\n    const query = `${title} trailer`;\n    const response = await axios.get(`${YOUTUBE_BASE_URL}?part=snippet&q=${query}&key=${YOUTUBE_API_KEY}`);\n    if (response.data.items && response.data.items.length > 0) {\n      return `https://www.youtube.com/embed/${response.data.items[0].id.videoId}`;\n    }\n    throw new Error('No trailer found');\n  } catch (error) {\n    console.error('Error fetching trailer:', error);\n    throw error; // Propagate the error so it can be handled in the component\n  }\n};\nconst calculatePopularity = data => {\n  const rating = parseFloat(data.imdbRating) || 0;\n  const votes = parseInt(data.imdbVotes.replace(/,/g, '')) || 0;\n\n  // Normalize rating (assuming IMDb rating is out of 10)\n  const normalizedRating = rating / 10 * 100;\n\n  // Normalize votes (let's assume max votes considered is 1,000,000 for normalization)\n  const normalizedVotes = Math.min(votes / 1000000 * 100, 100);\n\n  // Combine the factors to get a final popularity score\n  const popularity = normalizedRating * 0.7 + normalizedVotes * 0.3; // Adjust weights as necessary\n\n  return popularity.toFixed(2);\n};\nexport const fetchPopularity = async imdbID => {\n  const response = await axios.get(`${OMDB_BASE_URL}?apikey=${OMDB_API_KEY}&i=${imdbID}`);\n  if (response.data && response.data.Response === 'True') {\n    const popularity = calculatePopularity(response.data);\n    return popularity;\n  }\n  return 'N/A';\n};","map":{"version":3,"names":["axios","OMDB_API_KEY","OMDB_BASE_URL","YOUTUBE_API_KEY","YOUTUBE_BASE_URL","fetchMovies","query","count","response","get","data","Search","moviePromises","slice","map","movie","imdbID","movieResponses","Promise","all","res","searchMovies","fetchMovieDetails","id","fetchTrailer","title","items","length","videoId","Error","error","console","calculatePopularity","rating","parseFloat","imdbRating","votes","parseInt","imdbVotes","replace","normalizedRating","normalizedVotes","Math","min","popularity","toFixed","fetchPopularity","Response"],"sources":["C:/Users/Serhan/Desktop/berkayodev3/frontend/src/services/movieService.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst OMDB_API_KEY = '2d5488dc'; // Your OMDb API key\r\nconst OMDB_BASE_URL = 'https://www.omdbapi.com/';\r\n\r\nconst YOUTUBE_API_KEY = 'AIzaSyARJFJqqWewoRGc4aCOzfgEJhp9o4bKv_8'; // Replace with your YouTube API key\r\nconst YOUTUBE_BASE_URL = 'https://www.googleapis.com/youtube/v3/search';\r\n\r\nexport const fetchMovies = async (query = 'movie', count = 10) => {\r\n  const response = await axios.get(`${OMDB_BASE_URL}?apikey=${OMDB_API_KEY}&s=${query}`);\r\n  if (response.data.Search) {\r\n    const moviePromises = response.data.Search.slice(0, count).map(movie =>\r\n      axios.get(`${OMDB_BASE_URL}?apikey=${OMDB_API_KEY}&i=${movie.imdbID}`)\r\n    );\r\n    const movieResponses = await Promise.all(moviePromises);\r\n    return movieResponses.map(res => res.data);\r\n  }\r\n  return [];\r\n};\r\n\r\nexport const searchMovies = async (query, count = 3) => {\r\n  const response = await axios.get(`${OMDB_BASE_URL}?apikey=${OMDB_API_KEY}&s=${query}`);\r\n  if (response.data.Search) {\r\n    const moviePromises = response.data.Search.slice(0, count).map(movie =>\r\n      axios.get(`${OMDB_BASE_URL}?apikey=${OMDB_API_KEY}&i=${movie.imdbID}`)\r\n    );\r\n    const movieResponses = await Promise.all(moviePromises);\r\n    return movieResponses.map(res => res.data);\r\n  }\r\n  return [];\r\n};\r\n\r\nexport const fetchMovieDetails = async (id) => {\r\n  const response = await axios.get(`${OMDB_BASE_URL}?apikey=${OMDB_API_KEY}&i=${id}`);\r\n  return response.data;\r\n};\r\n\r\nexport const fetchTrailer = async (title) => {\r\n  try {\r\n    const query = `${title} trailer`;\r\n    const response = await axios.get(`${YOUTUBE_BASE_URL}?part=snippet&q=${query}&key=${YOUTUBE_API_KEY}`);\r\n    if (response.data.items && response.data.items.length > 0) {\r\n      return `https://www.youtube.com/embed/${response.data.items[0].id.videoId}`;\r\n    }\r\n    throw new Error('No trailer found');\r\n  } catch (error) {\r\n    console.error('Error fetching trailer:', error);\r\n    throw error; // Propagate the error so it can be handled in the component\r\n  }\r\n};\r\n\r\nconst calculatePopularity = (data) => {\r\n  const rating = parseFloat(data.imdbRating) || 0;\r\n  const votes = parseInt(data.imdbVotes.replace(/,/g, '')) || 0;\r\n\r\n  // Normalize rating (assuming IMDb rating is out of 10)\r\n  const normalizedRating = (rating / 10) * 100;\r\n\r\n  // Normalize votes (let's assume max votes considered is 1,000,000 for normalization)\r\n  const normalizedVotes = Math.min((votes / 1000000) * 100, 100);\r\n\r\n  // Combine the factors to get a final popularity score\r\n  const popularity = (normalizedRating * 0.7) + (normalizedVotes * 0.3); // Adjust weights as necessary\r\n\r\n  return popularity.toFixed(2);\r\n};\r\n\r\nexport const fetchPopularity = async (imdbID) => {\r\n  const response = await axios.get(`${OMDB_BASE_URL}?apikey=${OMDB_API_KEY}&i=${imdbID}`);\r\n  if (response.data && response.data.Response === 'True') {\r\n    const popularity = calculatePopularity(response.data);\r\n    return popularity;\r\n  }\r\n  return 'N/A';\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}