{"ast":null,"code":"import axios from 'axios';\nconst API_KEY = '2d5488dc'; // Your OMDb API key\nconst BASE_URL = 'https://www.omdbapi.com/';\nexport const fetchMovies = async (query = 'movie', count = 10) => {\n  const response = await axios.get(`${BASE_URL}?apikey=${API_KEY}&s=${query}`);\n  if (response.data.Search) {\n    const moviePromises = response.data.Search.slice(0, count).map(movie => axios.get(`${BASE_URL}?apikey=${API_KEY}&i=${movie.imdbID}`));\n    const movieResponses = await Promise.all(moviePromises);\n    return movieResponses.map(res => res.data);\n  }\n  return [];\n};\nexport const searchMovies = async (query, count = 3) => {\n  const response = await axios.get(`${BASE_URL}?apikey=${API_KEY}&s=${query}`);\n  return response.data.Search ? response.data.Search.slice(0, count) : [];\n};\nexport const fetchMovieDetails = async id => {\n  const response = await axios.get(`${BASE_URL}?apikey=${API_KEY}&i=${id}`);\n  return response.data;\n};\nexport const fetchTrailer = async title => {\n  const query = `${title} trailer`;\n  const apiKey = 'AIzaSyAkHmYrSqjzt2ukp38OMIwSQ79J4PRjeZw'; // Replace with your YouTube API key\n  const response = await axios.get(`https://www.googleapis.com/youtube/v3/search?part=snippet&q=${query}&key=${apiKey}`);\n  return response.data.items.length > 0 ? `https://www.youtube.com/embed/${response.data.items[0].id.videoId}` : '';\n};\nexport const fetchPopularity = async imdbID => {\n  const response = await axios.get(`https://yourapi.com/popularity?imdbID=${imdbID}`); // Replace with your actual API endpoint\n  return response.data && response.data.popularity ? response.data.popularity : '';\n};","map":{"version":3,"names":["axios","API_KEY","BASE_URL","fetchMovies","query","count","response","get","data","Search","moviePromises","slice","map","movie","imdbID","movieResponses","Promise","all","res","searchMovies","fetchMovieDetails","id","fetchTrailer","title","apiKey","items","length","videoId","fetchPopularity","popularity"],"sources":["C:/Users/Serhan/Desktop/berkayodev3/frontend/src/services/movieService.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst API_KEY = '2d5488dc'; // Your OMDb API key\r\nconst BASE_URL = 'https://www.omdbapi.com/';\r\n\r\nexport const fetchMovies = async (query = 'movie', count = 10) => {\r\n  const response = await axios.get(`${BASE_URL}?apikey=${API_KEY}&s=${query}`);\r\n  if (response.data.Search) {\r\n    const moviePromises = response.data.Search.slice(0, count).map(movie =>\r\n      axios.get(`${BASE_URL}?apikey=${API_KEY}&i=${movie.imdbID}`)\r\n    );\r\n    const movieResponses = await Promise.all(moviePromises);\r\n    return movieResponses.map(res => res.data);\r\n  }\r\n  return [];\r\n};\r\n\r\nexport const searchMovies = async (query, count = 3) => {\r\n  const response = await axios.get(`${BASE_URL}?apikey=${API_KEY}&s=${query}`);\r\n  return response.data.Search ? response.data.Search.slice(0, count) : [];\r\n};\r\n\r\nexport const fetchMovieDetails = async (id) => {\r\n  const response = await axios.get(`${BASE_URL}?apikey=${API_KEY}&i=${id}`);\r\n  return response.data;\r\n};\r\n\r\nexport const fetchTrailer = async (title) => {\r\n  const query = `${title} trailer`;\r\n  const apiKey = 'AIzaSyAkHmYrSqjzt2ukp38OMIwSQ79J4PRjeZw'; // Replace with your YouTube API key\r\n  const response = await axios.get(`https://www.googleapis.com/youtube/v3/search?part=snippet&q=${query}&key=${apiKey}`);\r\n  return response.data.items.length > 0 ? `https://www.youtube.com/embed/${response.data.items[0].id.videoId}` : '';\r\n};\r\n\r\nexport const fetchPopularity = async (imdbID) => {\r\n  const response = await axios.get(`https://yourapi.com/popularity?imdbID=${imdbID}`); // Replace with your actual API endpoint\r\n  return response.data && response.data.popularity ? response.data.popularity : '';\r\n};\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,OAAO,GAAG,UAAU,CAAC,CAAC;AAC5B,MAAMC,QAAQ,GAAG,0BAA0B;AAE3C,OAAO,MAAMC,WAAW,GAAG,MAAAA,CAAOC,KAAK,GAAG,OAAO,EAAEC,KAAK,GAAG,EAAE,KAAK;EAChE,MAAMC,QAAQ,GAAG,MAAMN,KAAK,CAACO,GAAG,CAAC,GAAGL,QAAQ,WAAWD,OAAO,MAAMG,KAAK,EAAE,CAAC;EAC5E,IAAIE,QAAQ,CAACE,IAAI,CAACC,MAAM,EAAE;IACxB,MAAMC,aAAa,GAAGJ,QAAQ,CAACE,IAAI,CAACC,MAAM,CAACE,KAAK,CAAC,CAAC,EAAEN,KAAK,CAAC,CAACO,GAAG,CAACC,KAAK,IAClEb,KAAK,CAACO,GAAG,CAAC,GAAGL,QAAQ,WAAWD,OAAO,MAAMY,KAAK,CAACC,MAAM,EAAE,CAC7D,CAAC;IACD,MAAMC,cAAc,GAAG,MAAMC,OAAO,CAACC,GAAG,CAACP,aAAa,CAAC;IACvD,OAAOK,cAAc,CAACH,GAAG,CAACM,GAAG,IAAIA,GAAG,CAACV,IAAI,CAAC;EAC5C;EACA,OAAO,EAAE;AACX,CAAC;AAED,OAAO,MAAMW,YAAY,GAAG,MAAAA,CAAOf,KAAK,EAAEC,KAAK,GAAG,CAAC,KAAK;EACtD,MAAMC,QAAQ,GAAG,MAAMN,KAAK,CAACO,GAAG,CAAC,GAAGL,QAAQ,WAAWD,OAAO,MAAMG,KAAK,EAAE,CAAC;EAC5E,OAAOE,QAAQ,CAACE,IAAI,CAACC,MAAM,GAAGH,QAAQ,CAACE,IAAI,CAACC,MAAM,CAACE,KAAK,CAAC,CAAC,EAAEN,KAAK,CAAC,GAAG,EAAE;AACzE,CAAC;AAED,OAAO,MAAMe,iBAAiB,GAAG,MAAOC,EAAE,IAAK;EAC7C,MAAMf,QAAQ,GAAG,MAAMN,KAAK,CAACO,GAAG,CAAC,GAAGL,QAAQ,WAAWD,OAAO,MAAMoB,EAAE,EAAE,CAAC;EACzE,OAAOf,QAAQ,CAACE,IAAI;AACtB,CAAC;AAED,OAAO,MAAMc,YAAY,GAAG,MAAOC,KAAK,IAAK;EAC3C,MAAMnB,KAAK,GAAG,GAAGmB,KAAK,UAAU;EAChC,MAAMC,MAAM,GAAG,yCAAyC,CAAC,CAAC;EAC1D,MAAMlB,QAAQ,GAAG,MAAMN,KAAK,CAACO,GAAG,CAAC,+DAA+DH,KAAK,QAAQoB,MAAM,EAAE,CAAC;EACtH,OAAOlB,QAAQ,CAACE,IAAI,CAACiB,KAAK,CAACC,MAAM,GAAG,CAAC,GAAG,iCAAiCpB,QAAQ,CAACE,IAAI,CAACiB,KAAK,CAAC,CAAC,CAAC,CAACJ,EAAE,CAACM,OAAO,EAAE,GAAG,EAAE;AACnH,CAAC;AAED,OAAO,MAAMC,eAAe,GAAG,MAAOd,MAAM,IAAK;EAC/C,MAAMR,QAAQ,GAAG,MAAMN,KAAK,CAACO,GAAG,CAAC,yCAAyCO,MAAM,EAAE,CAAC,CAAC,CAAC;EACrF,OAAOR,QAAQ,CAACE,IAAI,IAAIF,QAAQ,CAACE,IAAI,CAACqB,UAAU,GAAGvB,QAAQ,CAACE,IAAI,CAACqB,UAAU,GAAG,EAAE;AAClF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}