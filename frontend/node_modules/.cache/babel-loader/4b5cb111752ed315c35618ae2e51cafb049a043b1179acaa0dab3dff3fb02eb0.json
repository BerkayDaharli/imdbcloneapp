{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = 'http://localhost:5000/api'; // Replace with your backend URL\n\nexport const fetchMovies = async (query = 'movie', count = 10) => {\n  const response = await axios.get(`${API_BASE_URL}/movies/search/${query}`);\n  if (response.data.Search) {\n    const moviePromises = response.data.Search.slice(0, count).map(movie => axios.get(`${API_BASE_URL}/movies/${movie.imdbID}`));\n    const movieResponses = await Promise.all(moviePromises);\n    return movieResponses.map(res => res.data);\n  }\n  return [];\n};\nexport const searchMovies = async (query, count = 3) => {\n  const response = await axios.get(`${API_BASE_URL}/movies/search/${query}`);\n  if (response.data.Search) {\n    const moviePromises = response.data.Search.slice(0, count).map(movie => axios.get(`${API_BASE_URL}/movies/${movie.imdbID}`));\n    const movieResponses = await Promise.all(moviePromises);\n    return movieResponses.map(res => res.data);\n  }\n  return [];\n};\nexport const fetchMovieDetails = async imdbID => {\n  const response = await axios.get(`${API_BASE_URL}/movies/${imdbID}`);\n  return response.data;\n};\nexport const fetchTrailer = async title => {\n  const query = `${title} trailer`;\n  const apiKey = 'AIzaSyAkHmYrSqjzt2ukp38OMIwSQ79J4PRjeZw'; // Replace with your YouTube API key\n  const response = await axios.get(`https://www.googleapis.com/youtube/v3/search?part=snippet&q=${query}&key=${apiKey}`);\n  return response.data.items.length > 0 ? `https://www.youtube.com/embed/${response.data.items[0].id.videoId}` : '';\n};\nconst calculatePopularity = data => {\n  const rating = parseFloat(data.imdbRating) || 0;\n  const votes = parseInt(data.imdbVotes.replace(/,/g, '')) || 0;\n\n  // Normalize rating (assuming IMDb rating is out of 10)\n  const normalizedRating = rating / 10 * 100;\n\n  // Normalize votes (let's assume max votes considered is 1,000,000 for normalization)\n  const normalizedVotes = Math.min(votes / 1000000 * 100, 100);\n\n  // Combine the factors to get a final popularity score\n  const popularity = normalizedRating * 0.7 + normalizedVotes * 0.3; // Adjust weights as necessary\n\n  return popularity.toFixed(2);\n};\nexport const fetchPopularity = async imdbID => {\n  const response = await axios.get(`${API_BASE_URL}/movies/${imdbID}`);\n  if (response.data && response.data.Response === 'True') {\n    const popularity = calculatePopularity(response.data);\n    return popularity;\n  }\n  return 'N/A';\n};","map":{"version":3,"names":["axios","API_BASE_URL","fetchMovies","query","count","response","get","data","Search","moviePromises","slice","map","movie","imdbID","movieResponses","Promise","all","res","searchMovies","fetchMovieDetails","fetchTrailer","title","apiKey","items","length","id","videoId","calculatePopularity","rating","parseFloat","imdbRating","votes","parseInt","imdbVotes","replace","normalizedRating","normalizedVotes","Math","min","popularity","toFixed","fetchPopularity","Response"],"sources":["C:/Users/Serhan/Desktop/berkayodev3/frontend/src/services/movieService.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst API_BASE_URL = 'http://localhost:5000/api'; // Replace with your backend URL\r\n\r\nexport const fetchMovies = async (query = 'movie', count = 10) => {\r\n  const response = await axios.get(`${API_BASE_URL}/movies/search/${query}`);\r\n  if (response.data.Search) {\r\n    const moviePromises = response.data.Search.slice(0, count).map(movie =>\r\n      axios.get(`${API_BASE_URL}/movies/${movie.imdbID}`)\r\n    );\r\n    const movieResponses = await Promise.all(moviePromises);\r\n    return movieResponses.map(res => res.data);\r\n  }\r\n  return [];\r\n};\r\n\r\nexport const searchMovies = async (query, count = 3) => {\r\n  const response = await axios.get(`${API_BASE_URL}/movies/search/${query}`);\r\n  if (response.data.Search) {\r\n    const moviePromises = response.data.Search.slice(0, count).map(movie =>\r\n      axios.get(`${API_BASE_URL}/movies/${movie.imdbID}`)\r\n    );\r\n    const movieResponses = await Promise.all(moviePromises);\r\n    return movieResponses.map(res => res.data);\r\n  }\r\n  return [];\r\n};\r\n\r\nexport const fetchMovieDetails = async (imdbID) => {\r\n  const response = await axios.get(`${API_BASE_URL}/movies/${imdbID}`);\r\n  return response.data;\r\n};\r\n\r\nexport const fetchTrailer = async (title) => {\r\n  const query = `${title} trailer`;\r\n  const apiKey = 'AIzaSyAkHmYrSqjzt2ukp38OMIwSQ79J4PRjeZw'; // Replace with your YouTube API key\r\n  const response = await axios.get(`https://www.googleapis.com/youtube/v3/search?part=snippet&q=${query}&key=${apiKey}`);\r\n  return response.data.items.length > 0 ? `https://www.youtube.com/embed/${response.data.items[0].id.videoId}` : '';\r\n};\r\n\r\nconst calculatePopularity = (data) => {\r\n  const rating = parseFloat(data.imdbRating) || 0;\r\n  const votes = parseInt(data.imdbVotes.replace(/,/g, '')) || 0;\r\n\r\n  // Normalize rating (assuming IMDb rating is out of 10)\r\n  const normalizedRating = (rating / 10) * 100;\r\n\r\n  // Normalize votes (let's assume max votes considered is 1,000,000 for normalization)\r\n  const normalizedVotes = Math.min((votes / 1000000) * 100, 100);\r\n\r\n  // Combine the factors to get a final popularity score\r\n  const popularity = (normalizedRating * 0.7) + (normalizedVotes * 0.3); // Adjust weights as necessary\r\n\r\n  return popularity.toFixed(2);\r\n};\r\n\r\nexport const fetchPopularity = async (imdbID) => {\r\n  const response = await axios.get(`${API_BASE_URL}/movies/${imdbID}`);\r\n  if (response.data && response.data.Response === 'True') {\r\n    const popularity = calculatePopularity(response.data);\r\n    return popularity;\r\n  }\r\n  return 'N/A';\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}