{"ast":null,"code":"import axios from'axios';const OMDB_API_KEY='2d5488dc';// Your OMDb API key\nconst OMDB_BASE_URL='https://www.omdbapi.com/';const YOUTUBE_API_KEY='AIzaSyARJFJqqWewoRGc4aCOzfgEJhp9o4bKv_8';// Replace with your YouTube API key\nconst YOUTUBE_BASE_URL='https://www.googleapis.com/youtube/v3/search';export const fetchMovies=async function(){let query=arguments.length>0&&arguments[0]!==undefined?arguments[0]:'movie';let count=arguments.length>1&&arguments[1]!==undefined?arguments[1]:10;const response=await axios.get(\"\".concat(OMDB_BASE_URL,\"?apikey=\").concat(OMDB_API_KEY,\"&s=\").concat(query));if(response.data.Search){const moviePromises=response.data.Search.slice(0,count).map(movie=>axios.get(\"\".concat(OMDB_BASE_URL,\"?apikey=\").concat(OMDB_API_KEY,\"&i=\").concat(movie.imdbID)));const movieResponses=await Promise.all(moviePromises);return movieResponses.map(res=>res.data);}return[];};export const searchMovies=async function(query){let count=arguments.length>1&&arguments[1]!==undefined?arguments[1]:3;const response=await axios.get(\"\".concat(OMDB_BASE_URL,\"?apikey=\").concat(OMDB_API_KEY,\"&s=\").concat(query));if(response.data.Search){const moviePromises=response.data.Search.slice(0,count).map(movie=>axios.get(\"\".concat(OMDB_BASE_URL,\"?apikey=\").concat(OMDB_API_KEY,\"&i=\").concat(movie.imdbID)));const movieResponses=await Promise.all(moviePromises);return movieResponses.map(res=>res.data);}return[];};export const fetchMovieDetails=async id=>{const response=await axios.get(\"\".concat(OMDB_BASE_URL,\"?apikey=\").concat(OMDB_API_KEY,\"&i=\").concat(id));return response.data;};export const fetchTrailer=async title=>{try{const query=\"\".concat(title,\" trailer\");const response=await axios.get(\"\".concat(YOUTUBE_BASE_URL,\"?part=snippet&q=\").concat(query,\"&key=\").concat(YOUTUBE_API_KEY));if(response.data.items&&response.data.items.length>0){return\"https://www.youtube.com/embed/\".concat(response.data.items[0].id.videoId);}throw new Error('No trailer found');}catch(error){console.error('Error fetching trailer:',error);throw error;// Propagate the error so it can be handled in the component\n}};const calculatePopularity=data=>{const rating=parseFloat(data.imdbRating)||0;const votes=parseInt(data.imdbVotes.replace(/,/g,''))||0;// Normalize rating (assuming IMDb rating is out of 10)\nconst normalizedRating=rating/10*100;// Normalize votes (let's assume max votes considered is 1,000,000 for normalization)\nconst normalizedVotes=Math.min(votes/1000000*100,100);// Combine the factors to get a final popularity score\nconst popularity=normalizedRating*0.7+normalizedVotes*0.3;// Adjust weights as necessary\nreturn popularity.toFixed(2);};export const fetchPopularity=async imdbID=>{const response=await axios.get(\"\".concat(OMDB_BASE_URL,\"?apikey=\").concat(OMDB_API_KEY,\"&i=\").concat(imdbID));if(response.data&&response.data.Response==='True'){const popularity=calculatePopularity(response.data);return popularity;}return'N/A';};","map":{"version":3,"names":["axios","OMDB_API_KEY","OMDB_BASE_URL","YOUTUBE_API_KEY","YOUTUBE_BASE_URL","fetchMovies","query","arguments","length","undefined","count","response","get","concat","data","Search","moviePromises","slice","map","movie","imdbID","movieResponses","Promise","all","res","searchMovies","fetchMovieDetails","id","fetchTrailer","title","items","videoId","Error","error","console","calculatePopularity","rating","parseFloat","imdbRating","votes","parseInt","imdbVotes","replace","normalizedRating","normalizedVotes","Math","min","popularity","toFixed","fetchPopularity","Response"],"sources":["C:/Users/Serhan/Desktop/berkayodev3/frontend/src/services/movieService.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst OMDB_API_KEY = '2d5488dc'; // Your OMDb API key\r\nconst OMDB_BASE_URL = 'https://www.omdbapi.com/';\r\n\r\nconst YOUTUBE_API_KEY = 'AIzaSyARJFJqqWewoRGc4aCOzfgEJhp9o4bKv_8'; // Replace with your YouTube API key\r\nconst YOUTUBE_BASE_URL = 'https://www.googleapis.com/youtube/v3/search';\r\n\r\nexport const fetchMovies = async (query = 'movie', count = 10) => {\r\n  const response = await axios.get(`${OMDB_BASE_URL}?apikey=${OMDB_API_KEY}&s=${query}`);\r\n  if (response.data.Search) {\r\n    const moviePromises = response.data.Search.slice(0, count).map(movie =>\r\n      axios.get(`${OMDB_BASE_URL}?apikey=${OMDB_API_KEY}&i=${movie.imdbID}`)\r\n    );\r\n    const movieResponses = await Promise.all(moviePromises);\r\n    return movieResponses.map(res => res.data);\r\n  }\r\n  return [];\r\n};\r\n\r\nexport const searchMovies = async (query, count = 3) => {\r\n  const response = await axios.get(`${OMDB_BASE_URL}?apikey=${OMDB_API_KEY}&s=${query}`);\r\n  if (response.data.Search) {\r\n    const moviePromises = response.data.Search.slice(0, count).map(movie =>\r\n      axios.get(`${OMDB_BASE_URL}?apikey=${OMDB_API_KEY}&i=${movie.imdbID}`)\r\n    );\r\n    const movieResponses = await Promise.all(moviePromises);\r\n    return movieResponses.map(res => res.data);\r\n  }\r\n  return [];\r\n};\r\n\r\nexport const fetchMovieDetails = async (id) => {\r\n  const response = await axios.get(`${OMDB_BASE_URL}?apikey=${OMDB_API_KEY}&i=${id}`);\r\n  return response.data;\r\n};\r\n\r\nexport const fetchTrailer = async (title) => {\r\n  try {\r\n    const query = `${title} trailer`;\r\n    const response = await axios.get(`${YOUTUBE_BASE_URL}?part=snippet&q=${query}&key=${YOUTUBE_API_KEY}`);\r\n    if (response.data.items && response.data.items.length > 0) {\r\n      return `https://www.youtube.com/embed/${response.data.items[0].id.videoId}`;\r\n    }\r\n    throw new Error('No trailer found');\r\n  } catch (error) {\r\n    console.error('Error fetching trailer:', error);\r\n    throw error; // Propagate the error so it can be handled in the component\r\n  }\r\n};\r\n\r\nconst calculatePopularity = (data) => {\r\n  const rating = parseFloat(data.imdbRating) || 0;\r\n  const votes = parseInt(data.imdbVotes.replace(/,/g, '')) || 0;\r\n\r\n  // Normalize rating (assuming IMDb rating is out of 10)\r\n  const normalizedRating = (rating / 10) * 100;\r\n\r\n  // Normalize votes (let's assume max votes considered is 1,000,000 for normalization)\r\n  const normalizedVotes = Math.min((votes / 1000000) * 100, 100);\r\n\r\n  // Combine the factors to get a final popularity score\r\n  const popularity = (normalizedRating * 0.7) + (normalizedVotes * 0.3); // Adjust weights as necessary\r\n\r\n  return popularity.toFixed(2);\r\n};\r\n\r\nexport const fetchPopularity = async (imdbID) => {\r\n  const response = await axios.get(`${OMDB_BASE_URL}?apikey=${OMDB_API_KEY}&i=${imdbID}`);\r\n  if (response.data && response.data.Response === 'True') {\r\n    const popularity = calculatePopularity(response.data);\r\n    return popularity;\r\n  }\r\n  return 'N/A';\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}